/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthorizedRouteImport } from './routes/unauthorized'
import { Route as AboutRouteImport } from './routes/about'
import { Route as SetupRouteRouteImport } from './routes/setup/route'
import { Route as ManagerRouteRouteImport } from './routes/manager/route'
import { Route as EmployeeRouteRouteImport } from './routes/employee/route'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ManagerIndexRouteImport } from './routes/manager/index'
import { Route as EmployeeIndexRouteImport } from './routes/employee/index'
import { Route as SetupManagerProfileRouteImport } from './routes/setup/manager-profile'
import { Route as SetupEmployeeProfileRouteImport } from './routes/setup/employee-profile'
import { Route as ManagerReportsRouteImport } from './routes/manager/reports'
import { Route as ManagerPromoteRouteImport } from './routes/manager/promote'
import { Route as ManagerNotificationsRouteImport } from './routes/manager/notifications'
import { Route as ManagerLeaveApplicationsRouteImport } from './routes/manager/leave-applications'
import { Route as ManagerEditMyProfileRouteImport } from './routes/manager/edit-my-profile'
import { Route as ManagerApproveApplicationRouteImport } from './routes/manager/approve-application'
import { Route as EmployeeProfileRouteImport } from './routes/employee/profile'
import { Route as EmployeeNotificationsRouteImport } from './routes/employee/notifications'
import { Route as EmployeeApplyLeaveRouteImport } from './routes/employee/apply-leave'
import { Route as EmployeeAddSalesRouteImport } from './routes/employee/add-sales'
import { Route as AuthSignupRouteImport } from './routes/auth/signup'
import { Route as AuthPassresetRouteImport } from './routes/auth/passreset'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as ManagerEmployeeNameRouteImport } from './routes/manager/employee/$name'
import { Route as EmployeeSalesNameRouteImport } from './routes/employee/sales/$name'

const UnauthorizedRoute = UnauthorizedRouteImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const SetupRouteRoute = SetupRouteRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => rootRouteImport,
} as any)
const ManagerRouteRoute = ManagerRouteRouteImport.update({
  id: '/manager',
  path: '/manager',
  getParentRoute: () => rootRouteImport,
} as any)
const EmployeeRouteRoute = EmployeeRouteRouteImport.update({
  id: '/employee',
  path: '/employee',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ManagerIndexRoute = ManagerIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const EmployeeIndexRoute = EmployeeIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EmployeeRouteRoute,
} as any)
const SetupManagerProfileRoute = SetupManagerProfileRouteImport.update({
  id: '/manager-profile',
  path: '/manager-profile',
  getParentRoute: () => SetupRouteRoute,
} as any)
const SetupEmployeeProfileRoute = SetupEmployeeProfileRouteImport.update({
  id: '/employee-profile',
  path: '/employee-profile',
  getParentRoute: () => SetupRouteRoute,
} as any)
const ManagerReportsRoute = ManagerReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const ManagerPromoteRoute = ManagerPromoteRouteImport.update({
  id: '/promote',
  path: '/promote',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const ManagerNotificationsRoute = ManagerNotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const ManagerLeaveApplicationsRoute =
  ManagerLeaveApplicationsRouteImport.update({
    id: '/leave-applications',
    path: '/leave-applications',
    getParentRoute: () => ManagerRouteRoute,
  } as any)
const ManagerEditMyProfileRoute = ManagerEditMyProfileRouteImport.update({
  id: '/edit-my-profile',
  path: '/edit-my-profile',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const ManagerApproveApplicationRoute =
  ManagerApproveApplicationRouteImport.update({
    id: '/approve-application',
    path: '/approve-application',
    getParentRoute: () => ManagerRouteRoute,
  } as any)
const EmployeeProfileRoute = EmployeeProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => EmployeeRouteRoute,
} as any)
const EmployeeNotificationsRoute = EmployeeNotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => EmployeeRouteRoute,
} as any)
const EmployeeApplyLeaveRoute = EmployeeApplyLeaveRouteImport.update({
  id: '/apply-leave',
  path: '/apply-leave',
  getParentRoute: () => EmployeeRouteRoute,
} as any)
const EmployeeAddSalesRoute = EmployeeAddSalesRouteImport.update({
  id: '/add-sales',
  path: '/add-sales',
  getParentRoute: () => EmployeeRouteRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthPassresetRoute = AuthPassresetRouteImport.update({
  id: '/passreset',
  path: '/passreset',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const ManagerEmployeeNameRoute = ManagerEmployeeNameRouteImport.update({
  id: '/employee/$name',
  path: '/employee/$name',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const EmployeeSalesNameRoute = EmployeeSalesNameRouteImport.update({
  id: '/sales/$name',
  path: '/sales/$name',
  getParentRoute: () => EmployeeRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/employee': typeof EmployeeRouteRouteWithChildren
  '/manager': typeof ManagerRouteRouteWithChildren
  '/setup': typeof SetupRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/passreset': typeof AuthPassresetRoute
  '/auth/signup': typeof AuthSignupRoute
  '/employee/add-sales': typeof EmployeeAddSalesRoute
  '/employee/apply-leave': typeof EmployeeApplyLeaveRoute
  '/employee/notifications': typeof EmployeeNotificationsRoute
  '/employee/profile': typeof EmployeeProfileRoute
  '/manager/approve-application': typeof ManagerApproveApplicationRoute
  '/manager/edit-my-profile': typeof ManagerEditMyProfileRoute
  '/manager/leave-applications': typeof ManagerLeaveApplicationsRoute
  '/manager/notifications': typeof ManagerNotificationsRoute
  '/manager/promote': typeof ManagerPromoteRoute
  '/manager/reports': typeof ManagerReportsRoute
  '/setup/employee-profile': typeof SetupEmployeeProfileRoute
  '/setup/manager-profile': typeof SetupManagerProfileRoute
  '/employee/': typeof EmployeeIndexRoute
  '/manager/': typeof ManagerIndexRoute
  '/employee/sales/$name': typeof EmployeeSalesNameRoute
  '/manager/employee/$name': typeof ManagerEmployeeNameRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/setup': typeof SetupRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/passreset': typeof AuthPassresetRoute
  '/auth/signup': typeof AuthSignupRoute
  '/employee/add-sales': typeof EmployeeAddSalesRoute
  '/employee/apply-leave': typeof EmployeeApplyLeaveRoute
  '/employee/notifications': typeof EmployeeNotificationsRoute
  '/employee/profile': typeof EmployeeProfileRoute
  '/manager/approve-application': typeof ManagerApproveApplicationRoute
  '/manager/edit-my-profile': typeof ManagerEditMyProfileRoute
  '/manager/leave-applications': typeof ManagerLeaveApplicationsRoute
  '/manager/notifications': typeof ManagerNotificationsRoute
  '/manager/promote': typeof ManagerPromoteRoute
  '/manager/reports': typeof ManagerReportsRoute
  '/setup/employee-profile': typeof SetupEmployeeProfileRoute
  '/setup/manager-profile': typeof SetupManagerProfileRoute
  '/employee': typeof EmployeeIndexRoute
  '/manager': typeof ManagerIndexRoute
  '/employee/sales/$name': typeof EmployeeSalesNameRoute
  '/manager/employee/$name': typeof ManagerEmployeeNameRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/employee': typeof EmployeeRouteRouteWithChildren
  '/manager': typeof ManagerRouteRouteWithChildren
  '/setup': typeof SetupRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/passreset': typeof AuthPassresetRoute
  '/auth/signup': typeof AuthSignupRoute
  '/employee/add-sales': typeof EmployeeAddSalesRoute
  '/employee/apply-leave': typeof EmployeeApplyLeaveRoute
  '/employee/notifications': typeof EmployeeNotificationsRoute
  '/employee/profile': typeof EmployeeProfileRoute
  '/manager/approve-application': typeof ManagerApproveApplicationRoute
  '/manager/edit-my-profile': typeof ManagerEditMyProfileRoute
  '/manager/leave-applications': typeof ManagerLeaveApplicationsRoute
  '/manager/notifications': typeof ManagerNotificationsRoute
  '/manager/promote': typeof ManagerPromoteRoute
  '/manager/reports': typeof ManagerReportsRoute
  '/setup/employee-profile': typeof SetupEmployeeProfileRoute
  '/setup/manager-profile': typeof SetupManagerProfileRoute
  '/employee/': typeof EmployeeIndexRoute
  '/manager/': typeof ManagerIndexRoute
  '/employee/sales/$name': typeof EmployeeSalesNameRoute
  '/manager/employee/$name': typeof ManagerEmployeeNameRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/employee'
    | '/manager'
    | '/setup'
    | '/about'
    | '/unauthorized'
    | '/auth/login'
    | '/auth/passreset'
    | '/auth/signup'
    | '/employee/add-sales'
    | '/employee/apply-leave'
    | '/employee/notifications'
    | '/employee/profile'
    | '/manager/approve-application'
    | '/manager/edit-my-profile'
    | '/manager/leave-applications'
    | '/manager/notifications'
    | '/manager/promote'
    | '/manager/reports'
    | '/setup/employee-profile'
    | '/setup/manager-profile'
    | '/employee/'
    | '/manager/'
    | '/employee/sales/$name'
    | '/manager/employee/$name'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/setup'
    | '/about'
    | '/unauthorized'
    | '/auth/login'
    | '/auth/passreset'
    | '/auth/signup'
    | '/employee/add-sales'
    | '/employee/apply-leave'
    | '/employee/notifications'
    | '/employee/profile'
    | '/manager/approve-application'
    | '/manager/edit-my-profile'
    | '/manager/leave-applications'
    | '/manager/notifications'
    | '/manager/promote'
    | '/manager/reports'
    | '/setup/employee-profile'
    | '/setup/manager-profile'
    | '/employee'
    | '/manager'
    | '/employee/sales/$name'
    | '/manager/employee/$name'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/employee'
    | '/manager'
    | '/setup'
    | '/about'
    | '/unauthorized'
    | '/auth/login'
    | '/auth/passreset'
    | '/auth/signup'
    | '/employee/add-sales'
    | '/employee/apply-leave'
    | '/employee/notifications'
    | '/employee/profile'
    | '/manager/approve-application'
    | '/manager/edit-my-profile'
    | '/manager/leave-applications'
    | '/manager/notifications'
    | '/manager/promote'
    | '/manager/reports'
    | '/setup/employee-profile'
    | '/setup/manager-profile'
    | '/employee/'
    | '/manager/'
    | '/employee/sales/$name'
    | '/manager/employee/$name'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  EmployeeRouteRoute: typeof EmployeeRouteRouteWithChildren
  ManagerRouteRoute: typeof ManagerRouteRouteWithChildren
  SetupRouteRoute: typeof SetupRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  UnauthorizedRoute: typeof UnauthorizedRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/setup': {
      id: '/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof SetupRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manager': {
      id: '/manager'
      path: '/manager'
      fullPath: '/manager'
      preLoaderRoute: typeof ManagerRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/employee': {
      id: '/employee'
      path: '/employee'
      fullPath: '/employee'
      preLoaderRoute: typeof EmployeeRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manager/': {
      id: '/manager/'
      path: '/'
      fullPath: '/manager/'
      preLoaderRoute: typeof ManagerIndexRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/employee/': {
      id: '/employee/'
      path: '/'
      fullPath: '/employee/'
      preLoaderRoute: typeof EmployeeIndexRouteImport
      parentRoute: typeof EmployeeRouteRoute
    }
    '/setup/manager-profile': {
      id: '/setup/manager-profile'
      path: '/manager-profile'
      fullPath: '/setup/manager-profile'
      preLoaderRoute: typeof SetupManagerProfileRouteImport
      parentRoute: typeof SetupRouteRoute
    }
    '/setup/employee-profile': {
      id: '/setup/employee-profile'
      path: '/employee-profile'
      fullPath: '/setup/employee-profile'
      preLoaderRoute: typeof SetupEmployeeProfileRouteImport
      parentRoute: typeof SetupRouteRoute
    }
    '/manager/reports': {
      id: '/manager/reports'
      path: '/reports'
      fullPath: '/manager/reports'
      preLoaderRoute: typeof ManagerReportsRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/manager/promote': {
      id: '/manager/promote'
      path: '/promote'
      fullPath: '/manager/promote'
      preLoaderRoute: typeof ManagerPromoteRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/manager/notifications': {
      id: '/manager/notifications'
      path: '/notifications'
      fullPath: '/manager/notifications'
      preLoaderRoute: typeof ManagerNotificationsRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/manager/leave-applications': {
      id: '/manager/leave-applications'
      path: '/leave-applications'
      fullPath: '/manager/leave-applications'
      preLoaderRoute: typeof ManagerLeaveApplicationsRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/manager/edit-my-profile': {
      id: '/manager/edit-my-profile'
      path: '/edit-my-profile'
      fullPath: '/manager/edit-my-profile'
      preLoaderRoute: typeof ManagerEditMyProfileRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/manager/approve-application': {
      id: '/manager/approve-application'
      path: '/approve-application'
      fullPath: '/manager/approve-application'
      preLoaderRoute: typeof ManagerApproveApplicationRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/employee/profile': {
      id: '/employee/profile'
      path: '/profile'
      fullPath: '/employee/profile'
      preLoaderRoute: typeof EmployeeProfileRouteImport
      parentRoute: typeof EmployeeRouteRoute
    }
    '/employee/notifications': {
      id: '/employee/notifications'
      path: '/notifications'
      fullPath: '/employee/notifications'
      preLoaderRoute: typeof EmployeeNotificationsRouteImport
      parentRoute: typeof EmployeeRouteRoute
    }
    '/employee/apply-leave': {
      id: '/employee/apply-leave'
      path: '/apply-leave'
      fullPath: '/employee/apply-leave'
      preLoaderRoute: typeof EmployeeApplyLeaveRouteImport
      parentRoute: typeof EmployeeRouteRoute
    }
    '/employee/add-sales': {
      id: '/employee/add-sales'
      path: '/add-sales'
      fullPath: '/employee/add-sales'
      preLoaderRoute: typeof EmployeeAddSalesRouteImport
      parentRoute: typeof EmployeeRouteRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/passreset': {
      id: '/auth/passreset'
      path: '/passreset'
      fullPath: '/auth/passreset'
      preLoaderRoute: typeof AuthPassresetRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/manager/employee/$name': {
      id: '/manager/employee/$name'
      path: '/employee/$name'
      fullPath: '/manager/employee/$name'
      preLoaderRoute: typeof ManagerEmployeeNameRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/employee/sales/$name': {
      id: '/employee/sales/$name'
      path: '/sales/$name'
      fullPath: '/employee/sales/$name'
      preLoaderRoute: typeof EmployeeSalesNameRouteImport
      parentRoute: typeof EmployeeRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthPassresetRoute: typeof AuthPassresetRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthPassresetRoute: AuthPassresetRoute,
  AuthSignupRoute: AuthSignupRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface EmployeeRouteRouteChildren {
  EmployeeAddSalesRoute: typeof EmployeeAddSalesRoute
  EmployeeApplyLeaveRoute: typeof EmployeeApplyLeaveRoute
  EmployeeNotificationsRoute: typeof EmployeeNotificationsRoute
  EmployeeProfileRoute: typeof EmployeeProfileRoute
  EmployeeIndexRoute: typeof EmployeeIndexRoute
  EmployeeSalesNameRoute: typeof EmployeeSalesNameRoute
}

const EmployeeRouteRouteChildren: EmployeeRouteRouteChildren = {
  EmployeeAddSalesRoute: EmployeeAddSalesRoute,
  EmployeeApplyLeaveRoute: EmployeeApplyLeaveRoute,
  EmployeeNotificationsRoute: EmployeeNotificationsRoute,
  EmployeeProfileRoute: EmployeeProfileRoute,
  EmployeeIndexRoute: EmployeeIndexRoute,
  EmployeeSalesNameRoute: EmployeeSalesNameRoute,
}

const EmployeeRouteRouteWithChildren = EmployeeRouteRoute._addFileChildren(
  EmployeeRouteRouteChildren,
)

interface ManagerRouteRouteChildren {
  ManagerApproveApplicationRoute: typeof ManagerApproveApplicationRoute
  ManagerEditMyProfileRoute: typeof ManagerEditMyProfileRoute
  ManagerLeaveApplicationsRoute: typeof ManagerLeaveApplicationsRoute
  ManagerNotificationsRoute: typeof ManagerNotificationsRoute
  ManagerPromoteRoute: typeof ManagerPromoteRoute
  ManagerReportsRoute: typeof ManagerReportsRoute
  ManagerIndexRoute: typeof ManagerIndexRoute
  ManagerEmployeeNameRoute: typeof ManagerEmployeeNameRoute
}

const ManagerRouteRouteChildren: ManagerRouteRouteChildren = {
  ManagerApproveApplicationRoute: ManagerApproveApplicationRoute,
  ManagerEditMyProfileRoute: ManagerEditMyProfileRoute,
  ManagerLeaveApplicationsRoute: ManagerLeaveApplicationsRoute,
  ManagerNotificationsRoute: ManagerNotificationsRoute,
  ManagerPromoteRoute: ManagerPromoteRoute,
  ManagerReportsRoute: ManagerReportsRoute,
  ManagerIndexRoute: ManagerIndexRoute,
  ManagerEmployeeNameRoute: ManagerEmployeeNameRoute,
}

const ManagerRouteRouteWithChildren = ManagerRouteRoute._addFileChildren(
  ManagerRouteRouteChildren,
)

interface SetupRouteRouteChildren {
  SetupEmployeeProfileRoute: typeof SetupEmployeeProfileRoute
  SetupManagerProfileRoute: typeof SetupManagerProfileRoute
}

const SetupRouteRouteChildren: SetupRouteRouteChildren = {
  SetupEmployeeProfileRoute: SetupEmployeeProfileRoute,
  SetupManagerProfileRoute: SetupManagerProfileRoute,
}

const SetupRouteRouteWithChildren = SetupRouteRoute._addFileChildren(
  SetupRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  EmployeeRouteRoute: EmployeeRouteRouteWithChildren,
  ManagerRouteRoute: ManagerRouteRouteWithChildren,
  SetupRouteRoute: SetupRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  UnauthorizedRoute: UnauthorizedRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
