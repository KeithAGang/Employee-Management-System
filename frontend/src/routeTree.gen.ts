/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as SetupRouteRouteImport } from './routes/setup/route'
import { Route as ManagerRouteRouteImport } from './routes/manager/route'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ManagerIndexRouteImport } from './routes/manager/index'
import { Route as SetupManagerProfileRouteImport } from './routes/setup/manager-profile'
import { Route as SetupEmployeeProfileRouteImport } from './routes/setup/employee-profile'
import { Route as AuthSignupRouteImport } from './routes/auth/signup'
import { Route as AuthPassresetRouteImport } from './routes/auth/passreset'
import { Route as AuthLoginRouteImport } from './routes/auth/login'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const SetupRouteRoute = SetupRouteRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => rootRouteImport,
} as any)
const ManagerRouteRoute = ManagerRouteRouteImport.update({
  id: '/manager',
  path: '/manager',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ManagerIndexRoute = ManagerIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const SetupManagerProfileRoute = SetupManagerProfileRouteImport.update({
  id: '/manager-profile',
  path: '/manager-profile',
  getParentRoute: () => SetupRouteRoute,
} as any)
const SetupEmployeeProfileRoute = SetupEmployeeProfileRouteImport.update({
  id: '/employee-profile',
  path: '/employee-profile',
  getParentRoute: () => SetupRouteRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthPassresetRoute = AuthPassresetRouteImport.update({
  id: '/passreset',
  path: '/passreset',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/manager': typeof ManagerRouteRouteWithChildren
  '/setup': typeof SetupRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/passreset': typeof AuthPassresetRoute
  '/auth/signup': typeof AuthSignupRoute
  '/setup/employee-profile': typeof SetupEmployeeProfileRoute
  '/setup/manager-profile': typeof SetupManagerProfileRoute
  '/manager/': typeof ManagerIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/setup': typeof SetupRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/passreset': typeof AuthPassresetRoute
  '/auth/signup': typeof AuthSignupRoute
  '/setup/employee-profile': typeof SetupEmployeeProfileRoute
  '/setup/manager-profile': typeof SetupManagerProfileRoute
  '/manager': typeof ManagerIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/manager': typeof ManagerRouteRouteWithChildren
  '/setup': typeof SetupRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/passreset': typeof AuthPassresetRoute
  '/auth/signup': typeof AuthSignupRoute
  '/setup/employee-profile': typeof SetupEmployeeProfileRoute
  '/setup/manager-profile': typeof SetupManagerProfileRoute
  '/manager/': typeof ManagerIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/manager'
    | '/setup'
    | '/about'
    | '/auth/login'
    | '/auth/passreset'
    | '/auth/signup'
    | '/setup/employee-profile'
    | '/setup/manager-profile'
    | '/manager/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/setup'
    | '/about'
    | '/auth/login'
    | '/auth/passreset'
    | '/auth/signup'
    | '/setup/employee-profile'
    | '/setup/manager-profile'
    | '/manager'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/manager'
    | '/setup'
    | '/about'
    | '/auth/login'
    | '/auth/passreset'
    | '/auth/signup'
    | '/setup/employee-profile'
    | '/setup/manager-profile'
    | '/manager/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  ManagerRouteRoute: typeof ManagerRouteRouteWithChildren
  SetupRouteRoute: typeof SetupRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/setup': {
      id: '/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof SetupRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manager': {
      id: '/manager'
      path: '/manager'
      fullPath: '/manager'
      preLoaderRoute: typeof ManagerRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manager/': {
      id: '/manager/'
      path: '/'
      fullPath: '/manager/'
      preLoaderRoute: typeof ManagerIndexRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/setup/manager-profile': {
      id: '/setup/manager-profile'
      path: '/manager-profile'
      fullPath: '/setup/manager-profile'
      preLoaderRoute: typeof SetupManagerProfileRouteImport
      parentRoute: typeof SetupRouteRoute
    }
    '/setup/employee-profile': {
      id: '/setup/employee-profile'
      path: '/employee-profile'
      fullPath: '/setup/employee-profile'
      preLoaderRoute: typeof SetupEmployeeProfileRouteImport
      parentRoute: typeof SetupRouteRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/passreset': {
      id: '/auth/passreset'
      path: '/passreset'
      fullPath: '/auth/passreset'
      preLoaderRoute: typeof AuthPassresetRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthPassresetRoute: typeof AuthPassresetRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthPassresetRoute: AuthPassresetRoute,
  AuthSignupRoute: AuthSignupRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface ManagerRouteRouteChildren {
  ManagerIndexRoute: typeof ManagerIndexRoute
}

const ManagerRouteRouteChildren: ManagerRouteRouteChildren = {
  ManagerIndexRoute: ManagerIndexRoute,
}

const ManagerRouteRouteWithChildren = ManagerRouteRoute._addFileChildren(
  ManagerRouteRouteChildren,
)

interface SetupRouteRouteChildren {
  SetupEmployeeProfileRoute: typeof SetupEmployeeProfileRoute
  SetupManagerProfileRoute: typeof SetupManagerProfileRoute
}

const SetupRouteRouteChildren: SetupRouteRouteChildren = {
  SetupEmployeeProfileRoute: SetupEmployeeProfileRoute,
  SetupManagerProfileRoute: SetupManagerProfileRoute,
}

const SetupRouteRouteWithChildren = SetupRouteRoute._addFileChildren(
  SetupRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  ManagerRouteRoute: ManagerRouteRouteWithChildren,
  SetupRouteRoute: SetupRouteRouteWithChildren,
  AboutRoute: AboutRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
